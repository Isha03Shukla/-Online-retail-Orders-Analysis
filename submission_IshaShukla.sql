/*

-----------------------------------------------------------------------------------------------------------------------------------
                                               Guidelines
-----------------------------------------------------------------------------------------------------------------------------------

The provided document is a guide for the project. Follow the instructions and take the necessary steps to finish
the project in the SQL file			

-----------------------------------------------------------------------------------------------------------------------------------

                                                         Queries
                                               
-----------------------------------------------------------------------------------------------------------------------------------*/

-- 1. WRITE A QUERY TO DISPLAY CUSTOMER FULL NAME WITH THEIR TITLE (MR/MS), BOTH FIRST NAME AND LAST NAME ARE IN UPPER CASE WITH 
-- CUSTOMER EMAIL ID, CUSTOMER CREATIONDATE AND DISPLAY CUSTOMERâ€™S CATEGORY AFTER APPLYING BELOW CATEGORIZATION RULES:
	-- i.IF CUSTOMER CREATION DATE YEAR <2005 THEN CATEGORY A
    -- ii.IF CUSTOMER CREATION DATE YEAR >=2005 AND <2011 THEN CATEGORY B
    -- iii.IF CUSTOMER CREATION DATE YEAR>= 2011 THEN CATEGORY C
SELECT * FROM ONLINE_CUSTOMER;
    -- HINT: USE CASE STATEMENT, NO PERMANENT CHANGE IN TABLE REQUIRED. [NOTE: TABLES TO BE USED -ONLINE_CUSTOMER TABLE]
SELECT 
    CASE 
        WHEN CUSTOMER_GENDER = 'M' THEN CONCAT('MR. ', UPPER(CUSTOMER_FNAME), ' ', UPPER(CUSTOMER_LNAME))
        WHEN CUSTOMER_GENDER = 'F' THEN CONCAT('MS. ', UPPER(CUSTOMER_FNAME), ' ', UPPER(CUSTOMER_LNAME))
    END AS CUSTOMER_FULL_NAME,
    UPPER(CUSTOMER_EMAIL) AS CUSTOMER_EMAIL_ID,
    CUSTOMER_CREATION_DATE,
    CASE 
        WHEN YEAR(CUSTOMER_CREATION_DATE) < 2005 THEN 'CATEGORY A'
        WHEN YEAR(CUSTOMER_CREATION_DATE) >= 2005 AND YEAR(CUSTOMER_CREATION_DATE) < 2011 THEN 'CATEGORY B'
        ELSE 'CATEGORY C'
    END AS CUSTOMER_CATEGORY
FROM 
    ONLINE_CUSTOMER;


-- 2. WRITE A QUERY TO DISPLAY THE FOLLOWING INFORMATION FOR THE PRODUCTS, WHICH HAVE NOT BEEN SOLD:  PRODUCT_ID, PRODUCT_DESC, 
-- PRODUCT_QUANTITY_AVAIL, PRODUCT_PRICE,INVENTORY VALUES(PRODUCT_QUANTITY_AVAIL*PRODUCT_PRICE), NEW_PRICE AFTER APPLYING DISCOUNT 
-- AS PER BELOW CRITERIA. SORT THE OUTPUT WITH RESPECT TO DECREASING VALUE OF INVENTORY_VALUE.
	-- i.IF PRODUCT PRICE > 20,000 THEN APPLY 20% DISCOUNT
    -- ii.IF PRODUCT PRICE > 10,000 THEN APPLY 15% DISCOUNT
    -- iii.IF PRODUCT PRICE =< 10,000 THEN APPLY 10% DISCOUNT
SELECT * FROM PRODUCT;
SELECT * FROM ORDER_ITEMS;
    -- HINT: USE CASE STATEMENT, NO PERMANENT CHANGE IN TABLE REQUIRED. [NOTE: TABLES TO BE USED -PRODUCT, ORDER_ITEMS TABLE] 

SELECT 
	p.PRODUCT_ID,
	p.PRODUCT_DESC,
	p.PRODUCT_QUANTITY_AVAIL,
    p.PRODUCT_PRICE,
    (p.PRODUCT_QUANTITY_AVAIL*p.PRODUCT_PRICE) AS INVENTORY_VALUES,
	CASE 
			WHEN PRODUCT_PRICE > 20000 THEN (PRODUCT_PRICE-(PRODUCT_PRICE*(20/100)))
			WHEN PRODUCT_PRICE > 10000 THEN (PRODUCT_PRICE-(PRODUCT_PRICE*(15/100)))
			ELSE (PRODUCT_PRICE-(PRODUCT_PRICE*(10/100)))
	END AS NEW_PRICE
FROM 
	PRODUCT p
LEFT JOIN
	ORDER_ITEMS oi on p.PRODUCT_ID=oi.PRODUCT_ID
WHERE
	oi.PRODUCT_ID is NULL
ORDER BY
	INVENTORY_VALUES DESC;



-- 3. WRITE A QUERY TO DISPLAY PRODUCT_CLASS_CODE, PRODUCT_CLASS_CODE, COUNT OF PRODUCT TYPE IN EACH PRODUCT CLASS, 
-- INVENTORY VALUE (P.PRODUCT_QUANTITY_AVAIL*P.PRODUCT_PRICE). INFORMATION SHOULD BE DISPLAYED FOR ONLY THOSE PRODUCT_CLASS_CODE 
-- WHICH HAVE MORE THAN 1,00,000 INVENTORY VALUE. SORT THE OUTPUT WITH RESPECT TO DECREASING VALUE OF INVENTORY_VALUE.
SELECT * FROM PRODUCT;
SELECT * FROM PRODUCT_CLASS;
	-- [NOTE: TABLES TO BE USED -PRODUCT, PRODUCT_CLASS]
SELECT 
	PC.PRODUCT_CLASS_CODE, 
    PC.PRODUCT_CLASS_DESC, 
    COUNT(PC.PRODUCT_CLASS_CODE) AS COUNT_OF_PRODUCT_TYPE,
	SUM((P.PRODUCT_QUANTITY_AVAIL*P.PRODUCT_PRICE)) AS INVENTORY_VALUE
FROM 
	PRODUCT P
INNER JOIN 
	PRODUCT_CLASS PC ON P.PRODUCT_CLASS_CODE = PC.PRODUCT_CLASS_CODE
GROUP BY 
	PC.PRODUCT_CLASS_CODE, PC.PRODUCT_CLASS_DESC
HAVING
	INVENTORY_VALUE >100000
ORDER BY
	INVENTORY_VALUE DESC;

-- 4. WRITE A QUERY TO DISPLAY CUSTOMER_ID, FULL NAME, CUSTOMER_EMAIL, CUSTOMER_PHONE AND COUNTRY OF CUSTOMERS WHO HAVE CANCELLED 
-- ALL THE ORDERS PLACED BY THEM(USE SUB-QUERY)
SELECT * FROM ONLINE_CUSTOMER;
SELECT * FROM ADDRESS;
SELECT * FROM ORDER_HEADER;
	-- [NOTE: TABLES TO BE USED - ONLINE_CUSTOMER, ADDRESSS, ORDER_HEADER]
SELECT 
	OC.CUSTOMER_ID,
	CASE 
		WHEN OC.CUSTOMER_GENDER = 'M' THEN CONCAT('MR. ', UPPER(OC.CUSTOMER_FNAME), ' ', UPPER(OC.CUSTOMER_LNAME))
		WHEN OC.CUSTOMER_GENDER = 'F' THEN CONCAT('MS. ', UPPER(OC.CUSTOMER_FNAME), ' ', UPPER(OC.CUSTOMER_LNAME))
    END AS CUSTOMER_FULL_NAME,	
    OC.CUSTOMER_EMAIL,OC.CUSTOMER_PHONE, A.COUNTRY
FROM
	ONLINE_CUSTOMER OC
JOIN
	ADDRESS A ON OC.ADDRESS_ID=A.ADDRESS_ID
WHERE 
	OC.CUSTOMER_ID IN (
    SELECT OH.CUSTOMER_ID
    FROM
		ORDER_HEADER OH
	WHERE
		OH.ORDER_STATUS='Cancelled'
	GROUP BY
		OH.CUSTOMER_ID
	HAVING
		COUNT(*)=(SELECT COUNT(*) FROM ORDER_HEADER WHERE CUSTOMER_ID = oh.CUSTOMER_ID)
);

        
-- 5. WRITE A QUERY TO DISPLAY SHIPPER NAME, CITY TO WHICH IT IS CATERING, NUMBER OF CUSTOMER CATERED BY THE SHIPPER IN THE CITY AND 
-- NUMBER OF CONSIGNMENTS DELIVERED TO THAT CITY FOR SHIPPER DHL(9 ROWS)
SELECT * FROM SHIPPER;
SELECT * FROM ONLINE_CUSTOMER;
SELECT * FROM ORDER_HEADER;
SELECT * FROM ADDRESS;
	-- [NOTE: TABLES TO BE USED -SHIPPER, ONLINE_CUSTOMER, ADDRESSS, ORDER_HEADER]
SELECT 
	S.SHIPPER_NAME,
    A.CITY AS CATERING_CITY, 
    COUNT(DISTINCT OC.CUSTOMER_ID) AS CUSTOMER_CATERED,
	COUNT(*) AS CONSIGNMENTS_DELIVERED
FROM
	SHIPPER S
JOIN
	ORDER_HEADER OH ON S.SHIPPER_ID=OH.SHIPPER_ID
JOIN
	ONLINE_CUSTOMER OC ON OH.CUSTOMER_ID=OC.CUSTOMER_ID
JOIN
	ADDRESS A ON OC.ADDRESS_ID=A.ADDRESS_ID
WHERE
	S.SHIPPER_NAME = "DHL"
GROUP BY
	S.SHIPPER_NAME,A.CITY;
	
-- 6. WRITE A QUERY TO DISPLAY CUSTOMER ID, CUSTOMER FULL NAME, TOTAL QUANTITY AND TOTAL VALUE (QUANTITY*PRICE) SHIPPED WHERE MODE 
-- OF PAYMENT IS CASH AND CUSTOMER LAST NAME STARTS WITH 'G'
SELECT * FROM ONLINE_CUSTOMER;
SELECT * FROM ORDER_ITEMS;
SELECT * FROM PRODUCT;
SELECT * FROM ORDER_HEADER;
	-- [NOTE: TABLES TO BE USED -ONLINE_CUSTOMER, ORDER_ITEMS, PRODUCT, ORDER_HEADER]
SELECT 
	OC.CUSTOMER_ID,
	CASE 
		WHEN OC.CUSTOMER_GENDER = 'M' THEN CONCAT('MR. ', UPPER(OC.CUSTOMER_FNAME), ' ', UPPER(OC.CUSTOMER_LNAME))
		WHEN OC.CUSTOMER_GENDER = 'F' THEN CONCAT('MS. ', UPPER(OC.CUSTOMER_FNAME), ' ', UPPER(OC.CUSTOMER_LNAME))
    END AS CUSTOMER_FULL_NAME,	
    SUM(OI.PRODUCT_QUANTITY) AS TOTAL_QUANTITY,
    SUM(OI.PRODUCT_QUANTITY*P.PRODUCT_PRICE) AS TOTAL_VALUE_SHIPPED
FROM
	ONLINE_CUSTOMER OC
JOIN
	ORDER_HEADER OH ON OC.CUSTOMER_ID = OH.CUSTOMER_ID
JOIN
	ORDER_ITEMS OI ON OH.ORDER_ID = OI.ORDER_ID
JOIN
	PRODUCT P ON OI.PRODUCT_ID = P.PRODUCT_ID
WHERE 
	PAYMENT_MODE = 'Cash'
	AND CUSTOMER_LNAME LIKE 'G%'
GROUP BY
	OC.CUSTOMER_ID, OC.CUSTOMER_FNAME, OC.CUSTOMER_LNAME;

-- 7. WRITE A QUERY TO DISPLAY ORDER_ID AND VOLUME OF BIGGEST ORDER (IN TERMS OF VOLUME) THAT CAN FIT IN CARTON ID 10  
SELECT * FROM CARTON;
SELECT * FROM ORDER_ITEMS;
SELECT * FROM PRODUCT;
	-- [NOTE: TABLES TO BE USED -CARTON, ORDER_ITEMS, PRODUCT]
SELECT  
	OI.ORDER_ID,
    MAX(P.LEN *  P.WIDTH * P.HEIGHT) AS BIGGEST_VOLUME
FROM
	ORDER_ITEMS OI
JOIN 
	PRODUCT P ON OI.PRODUCT_ID = P.PRODUCT_ID
JOIN
	CARTON C ON P.LEN <= C.LEN AND P.WIDTH <= C.WIDTH AND P.HEIGHT <= C.HEIGHT
WHERE 
	C.CARTON_ID=10
GROUP BY
	OI.ORDER_ID
ORDER BY
	BIGGEST_VOLUME DESC
LIMIT 1;

-- 8. WRITE A QUERY TO DISPLAY PRODUCT_ID, PRODUCT_DESC, PRODUCT_QUANTITY_AVAIL, QUANTITY SOLD, AND SHOW INVENTORY STATUS OF 
-- PRODUCTS AS BELOW AS PER BELOW CONDITION:
	-- A.FOR ELECTRONICS AND COMPUTER CATEGORIES, 
		-- i.IF SALES TILL DATE IS ZERO THEN SHOW 'NO SALES IN PAST, GIVE DISCOUNT TO REDUCE INVENTORY',
        -- ii.IF INVENTORY QUANTITY IS LESS THAN 10% OF QUANTITY SOLD, SHOW 'LOW INVENTORY, NEED TO ADD INVENTORY', 
        -- iii.IF INVENTORY QUANTITY IS LESS THAN 50% OF QUANTITY SOLD, SHOW 'MEDIUM INVENTORY, NEED TO ADD SOME INVENTORY', 
        -- iv.IF INVENTORY QUANTITY IS MORE OR EQUAL TO 50% OF QUANTITY SOLD, SHOW 'SUFFICIENT INVENTORY'
	-- B.FOR MOBILES AND WATCHES CATEGORIES, 
		-- i.IF SALES TILL DATE IS ZERO THEN SHOW 'NO SALES IN PAST, GIVE DISCOUNT TO REDUCE INVENTORY', 
        -- ii.IF INVENTORY QUANTITY IS LESS THAN 20% OF QUANTITY SOLD, SHOW 'LOW INVENTORY, NEED TO ADD INVENTORY',  
        -- iii.IF INVENTORY QUANTITY IS LESS THAN 60% OF QUANTITY SOLD, SHOW 'MEDIUM INVENTORY, NEED TO ADD SOME INVENTORY', 
        -- iv.IF INVENTORY QUANTITY IS MORE OR EQUAL TO 60% OF QUANTITY SOLD, SHOW 'SUFFICIENT INVENTORY'
	-- C.REST OF THE CATEGORIES, 
		-- i.IF SALES TILL DATE IS ZERO THEN SHOW 'NO SALES IN PAST, GIVE DISCOUNT TO REDUCE INVENTORY', 
        -- ii.IF INVENTORY QUANTITY IS LESS THAN 30% OF QUANTITY SOLD, SHOW 'LOW INVENTORY, NEED TO ADD INVENTORY',  
        -- iii.IF INVENTORY QUANTITY IS LESS THAN 70% OF QUANTITY SOLD, SHOW 'MEDIUM INVENTORY, NEED TO ADD SOME INVENTORY', 
        -- iv. IF INVENTORY QUANTITY IS MORE OR EQUAL TO 70% OF QUANTITY SOLD, SHOW 'SUFFICIENT INVENTORY'
SELECT * FROM PRODUCT_CLASS;
SELECT * FROM ORDER_ITEMS;
SELECT * FROM PRODUCT;
			-- [NOTE: TABLES TO BE USED -PRODUCT, PRODUCT_CLASS, ORDER_ITEMS] (USE SUB-QUERY)
SELECT      
    P.PRODUCT_ID,     
    P.PRODUCT_DESC,     
    P.PRODUCT_QUANTITY_AVAIL,     
    SUM(OI.PRODUCT_QUANTITY) AS QUANTITY_SOLD,     
    CASE          
        WHEN PC.PRODUCT_CLASS_CODE IN ('Electronics', 'Computer') THEN             
            CASE                  
                WHEN SUM(OI.PRODUCT_QUANTITY) = 0 THEN 'NO SALES IN PAST, GIVE DISCOUNT TO REDUCE INVENTORY'                 
                WHEN P.PRODUCT_QUANTITY_AVAIL < (0.1 * SUM(OI.PRODUCT_QUANTITY)) THEN 'LOW INVENTORY, NEED TO ADD INVENTORY'                 
                WHEN P.PRODUCT_QUANTITY_AVAIL < (0.5 * SUM(OI.PRODUCT_QUANTITY)) THEN 'MEDIUM INVENTORY, NEED TO ADD SOME INVENTORY'                 
                ELSE 'SUFFICIENT INVENTORY'             
            END         
        WHEN PC.PRODUCT_CLASS_CODE IN ('Mobiles', 'Watches') THEN             
            CASE                  
                WHEN SUM(OI.PRODUCT_QUANTITY) = 0 THEN 'NO SALES IN PAST, GIVE DISCOUNT TO REDUCE INVENTORY'                 
                WHEN P.PRODUCT_QUANTITY_AVAIL < (0.2 * SUM(OI.PRODUCT_QUANTITY)) THEN 'LOW INVENTORY, NEED TO ADD INVENTORY'                 
                WHEN P.PRODUCT_QUANTITY_AVAIL < (0.6 * SUM(OI.PRODUCT_QUANTITY)) THEN 'MEDIUM INVENTORY, NEED TO ADD SOME INVENTORY'                 
                ELSE 'SUFFICIENT INVENTORY'             
            END         
        ELSE             
            CASE                  
                WHEN SUM(OI.PRODUCT_QUANTITY) = 0 THEN 'NO SALES IN PAST, GIVE DISCOUNT TO REDUCE INVENTORY'                 
                WHEN P.PRODUCT_QUANTITY_AVAIL < (0.3 * SUM(OI.PRODUCT_QUANTITY)) THEN 'LOW INVENTORY, NEED TO ADD INVENTORY'                 
                WHEN P.PRODUCT_QUANTITY_AVAIL < (0.7 * SUM(OI.PRODUCT_QUANTITY)) THEN 'MEDIUM INVENTORY, NEED TO ADD SOME INVENTORY'                 
                ELSE 'SUFFICIENT INVENTORY'             
            END     
    END AS INVENTORY_STATUS 
FROM      
    PRODUCT P 
JOIN      
    PRODUCT_CLASS PC ON P.PRODUCT_CLASS_CODE = PC.PRODUCT_CLASS_CODE 
LEFT JOIN      
    ORDER_ITEMS OI ON P.PRODUCT_ID = OI.PRODUCT_ID 
GROUP BY      
    P.PRODUCT_ID, P.PRODUCT_DESC, P.PRODUCT_QUANTITY_AVAIL, PC.PRODUCT_CLASS_CODE
ORDER BY -- This is optional, I have put this so that the result looks clean
	P.PRODUCT_ID ASC;


    
-- 9. WRITE A QUERY TO DISPLAY PRODUCT_ID, PRODUCT_DESC AND TOTAL QUANTITY OF PRODUCTS WHICH ARE SOLD TOGETHER WITH PRODUCT ID 201 
-- AND ARE NOT SHIPPED TO CITY BANGALORE AND NEW DELHI. DISPLAY THE OUTPUT IN DESCENDING ORDER WITH RESPECT TO TOT_QTY.(USE SUB-QUERY)
SELECT * FROM PRODUCT;
SELECT * FROM ORDER_ITEMS;
SELECT * FROM ORDER_HEADER;
SELECT * FROM ONLINE_CUSTOMER;
SELECT * FROM ADDRESS;
	-- [NOTE: TABLES TO BE USED -ORDER_ITEMS,PRODUCT,ORDER_HEADER, ONLINE_CUSTOMER, ADDRESS]
    
SELECT 
    P.PRODUCT_ID,
    P.PRODUCT_DESC,
    SUM(OI.PRODUCT_QUANTITY) AS TOT_QTY 
FROM 
    ORDER_ITEMS OI 
INNER JOIN 
    PRODUCT P ON OI.PRODUCT_ID = P.PRODUCT_ID 
WHERE 
    OI.ORDER_ID IN (
        SELECT 
            OI.ORDER_ID 
        FROM 
            ORDER_ITEMS OI 
        JOIN 
            ORDER_HEADER OH ON OI.ORDER_ID = OH.ORDER_ID 
        JOIN 
            ONLINE_CUSTOMER OC ON OH.CUSTOMER_ID = OC.CUSTOMER_ID 
        JOIN 
            ADDRESS A ON OC.ADDRESS_ID = A.ADDRESS_ID 
        WHERE 
            OI.PRODUCT_ID = 201 
            AND OH.ORDER_STATUS = 'Shipped' 
            AND A.CITY NOT IN ('New Delhi', 'Bangalore')
    ) 
    AND P.PRODUCT_ID != 201 
GROUP BY 
    P.PRODUCT_ID, P.PRODUCT_DESC
ORDER BY 
    TOT_QTY DESC;

-- 10. WRITE A QUERY TO DISPLAY THE ORDER_ID,CUSTOMER_ID AND CUSTOMER FULLNAME AND TOTAL QUANTITY OF PRODUCTS SHIPPED FOR ORDER IDS 
-- WHICH ARE EVEN AND SHIPPED TO ADDRESS WHERE PINCODE IS NOT STARTING WITH "5" 
SELECT * FROM ORDER_ITEMS;
SELECT * FROM ORDER_HEADER;
SELECT * FROM ONLINE_CUSTOMER;
SELECT * FROM ADDRESS;
	-- [NOTE: TABLES TO BE USED - ONLINE_CUSTOMER,ORDER_HEADER, ORDER_ITEMS, ADDRESS]
 
SELECT 
	OH.ORDER_ID,
    OC.CUSTOMER_ID,
    CASE 
		WHEN OC.CUSTOMER_GENDER = 'M' THEN CONCAT('MR. ', UPPER(OC.CUSTOMER_FNAME), ' ', UPPER(OC.CUSTOMER_LNAME))
		WHEN OC.CUSTOMER_GENDER = 'F' THEN CONCAT('MS. ', UPPER(OC.CUSTOMER_FNAME), ' ', UPPER(OC.CUSTOMER_LNAME))
    END AS CUSTOMER_FULL_NAME,	
    SUM(OI.PRODUCT_QUANTITY) AS TOT_QTY
FROM
	ORDER_HEADER OH
INNER JOIN 
	ONLINE_CUSTOMER OC ON OH.CUSTOMER_ID = OC.CUSTOMER_ID
INNER JOIN
	ADDRESS A ON OC.ADDRESS_ID = A.ADDRESS_ID
INNER JOIN
	ORDER_ITEMS OI ON OH.ORDER_ID = OI.ORDER_ID
WHERE
	OI.ORDER_ID % 2 = 0
    AND OH.ORDER_STATUS = 'Shipped'
    AND A.PINCODE NOT LIKE '5%'
GROUP BY
	OH.ORDER_ID, OC.CUSTOMER_ID,CUSTOMER_FULL_NAME;
    
    
